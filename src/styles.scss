/* You can add global styles to this file, and also import other style files */
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;700&display=swap');
@import "./variables.scss";
@import "./basics.scss";

*, *::after, *::before {
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  font-size: 1rem;
  background: $garlic;
  color: $blueberry;
  height: 100%;
  min-height: 100vh;
  width: 100%;
  font-family: Montserrat, Arial, sans-serif;
}

h1, h2, h3, h4, h5, h6 {
  color: $blueberry;
  font-weight: 700;
}

h1, .h1 {font-size: 2rem}
h2, .h2 {font-size: 1.75rem}
h3, .h3 {font-size: 1.5rem}
h4, .h4 {font-size: 1.25rem}
h5, .h5 {font-size: 1rem}
h6, .h6 {font-size: 0.75rem}

p, span, strong {
  color: $grape;

  &.ellipsis {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    display: inline-block;
  }
}

button {
  background-color: transparent;
  border: none;
}

.btn {
  border-radius: .25rem;
  padding: 0.75rem 1.75rem;
  font-weight: 700;
  font-size: 1rem;
  cursor: pointer;
  transition: transform .15s ease-in-out;
  margin: 0.5rem 0;

  &--light {
    background-color: $melon;
    color: $blueberry;
  }

  &--dark {
    background-color: $blueberry;
    color: $garlic;
  }

  &:hover {
    transform: translateY(-2px);
  }

}

input {
  background-color: transparent;
  border-radius: .5rem;

  &.input {
    padding: 0.75rem 1.75rem;
    font-size: 1rem;
    border: 0;
    transition: border-bottom-color .15s ease-in-out;
    background-color: lighten($garlic, 3);
    margin: 0.5rem 0;

    &:hover, &:focus {
      outline: none;
      border-bottom-color: $grape;
    }

    &__color {
      padding: 0.5rem 1rem;
      width: 100px;
      height: 44px;
    }

    &--light {
      border-bottom: 2px solid;
      background-color: $melon;
      color: $blueberry;
      border-color: $melon;

      &:hover, &:focus {
        border-bottom-color: $grape;
      }
    }

    &--dark {
      border-bottom: 2px solid;
      background-color: $blueberry;
      color: $garlic;
      border-color: $blueberry;

      &:hover, &:focus {
        border-bottom-color: $watermelon;
      }
    }
  }
}

img {
  max-width: 100%;
  height: auto;
  display: block;
  object-fit: cover;
  object-position: center;
}

@mixin size($h: 100%, $w: 100%) {
  height: #{$h};
  width: #{$w};
}

@mixin flex ($direction: 'column', $align: 'center', $justify: 'center') {
  display: flex;
  flex-direction: #{$direction};
  align-items: #{$align};
  justify-content: #{$justify};
}

@mixin grid ($columns: 2, $align: 'center', $justify: 'center', $gap: 1rem, $rows: 1) {
  display: grid;
  grid-template-columns: repeat(#{$columns}, 1fr);
  grid-template-rows: repeat(#{$rows}, 1fr);
  align-items: #{$align};
  justify-content: #{$justify};

  @if $gap {
    grid-gap: #{$gap};
  }
}

@mixin margin($top: false, $right: false, $bottom: false, $left: false) {

  @if $right {
    margin-right: #{$right};
  }

  @if $bottom {
    margin-bottom: #{$bottom};
  }

  @if $left {
    margin-left: #{$left};
  }

  @if($top && $left == false && $right == false && $bottom == false) {
    margin: #{$top};
  } @else if $top {
    margin-top: #{$top};
  }

}

@mixin marginX($right: 0, $left: 0) {
  margin-right: #{$right};

  @if($left) {
    margin-left: #{$left};
  } @else {
    margin-left: #{$right};
  }

}

@mixin marginY($top: 0, $bottom: 0) {
  margin-top: #{$top};

  @if($bottom) {
    margin-bottom: #{$bottom};
  } @else {
    margin-bottom: #{$top};
  }

}

@mixin padding($top: 0, $right: false, $bottom: false, $left: false) {
  @if $right {
    padding-right: #{$right};
  }

  @if $bottom {
    padding-bottom: #{$bottom};
  }

  @if $left {
    padding-left: #{$left};
  }

  @if $top {
    padding-top: #{$top};
  }
}

@mixin paddingX($right: 0, $left: false) {
  padding-right: #{$right};

  @if($left) {
    padding-left: #{$left};
  } @else {
    padding-left: #{$right};
  }

}

@mixin paddingY($top: 0, $bottom: false) {
  padding-top: #{$top};

  @if($bottom) {
    padding-bottom: #{$bottom};
  } @else {
    padding-bottom: #{$top};
  }

}

//@mixin gridMediaColumns($widths, $fractions]) {
//  @each $width in $widths {
//    @media scrren and (min-width: #{$width}) {
//      grid-template-columns: repeat($fractions[$width], '1fr');
//    }
//  }
//}

.content {
  @include marginY(8rem, 0);
}
